# nginx/nginx.conf

# Define o usuário que o NGINX usará.
# user nginx;

# O número de processos worker. 'auto' geralmente define para o número de cores da CPU.
worker_processes auto;

# Arquivo para armazenar o PID do processo mestre do NGINX.
pid /var/run/nginx.pid;

# Configurações de eventos.
events {
    worker_connections 1024; # Número máximo de conexões simultâneas por worker.
}

http {
    # Inclui tipos MIME para que o NGINX saiba como lidar com diferentes tipos de arquivos.
    include /etc/nginx/mime.types;
    # Tipo padrão se o tipo de arquivo não puder ser determinado.
    default_type application/octet-stream;

    # Formato do log de acesso.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Otimizações de envio de arquivos.
    sendfile on;
    # tcp_nopush on;
    # tcp_nodelay on;

    # Tempo limite para manter conexões keep-alive.
    keepalive_timeout 65;

    # --- Configurações de Compressão Gzip ---
    gzip on;                          # Habilita a compressão gzip.
    gzip_disable "msie6";             # Desabilita para IE6 (que tem problemas com gzip).
    gzip_vary on;                     # Adiciona o header "Vary: Accept-Encoding".
    gzip_proxied any;                 # Comprime respostas de backends proxied.
    gzip_comp_level 6;                # Nível de compressão (1-9). 6 é um bom equilíbrio.
    gzip_buffers 16 8k;               # Buffers para compressão.
    gzip_http_version 1.1;            # Versão mínima do HTTP para compressão.
    gzip_min_length 256;              # Não comprime respostas menores que 256 bytes.
    gzip_types                        # Tipos MIME para comprimir.
        text/plain
        text/css
        application/json
        application/javascript
        application/x-javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript
        image/svg+xml;

    # --- Configurações de Cache do Proxy ---
    # Define o caminho para o cache, níveis de diretório, nome da zona de chaves na memória,
    # tamanho máximo do cache em disco, tempo de inatividade antes de remover.
    proxy_cache_path /var/cache/nginx/data_cache levels=1:2 keys_zone=data_cache_zone:10m max_size=1g inactive=60m use_temp_path=off;

    # Define o servidor upstream (nosso microsserviço de dados).
    # 'data_service' será resolvido pelo Docker para o IP do container do microsserviço,
    # pois é o nome do serviço no docker-compose.yml.
    upstream data_microservice {
        server data_service:3001; # Nome do serviço definido no docker-compose.yml
    }

    server {
        listen 80; # NGINX escuta na porta 80.
        server_name localhost; # Ou seu domínio.

        location / {
            # Para um frontend SPA, você normalmente serviria o index.html aqui.
            # Exemplo:
            # root /usr/share/nginx/html;
            # index index.html index.htm;
            # try_files $uri $uri/ /index.html;
            return 200 "Bem-vindo ao NGINX! Acesse http://localhost:8080/api/data para ver o microsserviço em ação.";
            add_header Content-Type text/plain;
        }

        location /api/data {
            proxy_pass http://data_microservice; # Passa a requisição para o upstream.

            # --- Habilitando o Cache para esta Localização ---
            proxy_cache data_cache_zone;                 # Usa a zona de cache definida.
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args"; # Chave única para o cache.
            proxy_cache_valid 200 302 10m;               # Cacheia respostas 200 e 302 por 10 minutos.
            proxy_cache_valid 404 1m;                    # Cacheia respostas 404 por 1 minuto.
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504; # Serve conteúdo obsoleto se o backend falhar.
            proxy_cache_lock on;                         # Evita que múltiplas requisições idênticas recriem o mesmo item de cache simultaneamente.
            
            # Comente a linha abaixo se quiser que o Cache-Control do backend seja prioritário.
            # proxy_ignore_headers Cache-Control Expires Set-Cookie; 
            
            # Para respeitar o Cache-Control do backend e permitir que ele desabilite o cache do NGINX:
            proxy_cache_bypass $http_cache_control; # Se o backend enviar "Cache-Control: no-cache" ou "no-store", NGINX não cacheará.

            add_header X-Proxy-Cache $upstream_cache_status; # Adiciona um header para ver o status do cache (HIT, MISS, EXPIRED, etc.).
            add_header X-Handled-By "NGINX Proxy";

            # Headers para passar ao servidor backend.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Buffering da resposta do proxy.
            proxy_buffering on;
            proxy_buffer_size 16k;
            proxy_buffers 4 32k;
            proxy_busy_buffers_size 64k;

            # Timeouts
            proxy_connect_timeout 5s;
            proxy_read_timeout 60s;
            proxy_send_timeout 60s;
        }

        location /api/health {
            # Endpoint de health check do microsserviço, geralmente não cacheado.
            proxy_pass http://data_microservice;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            add_header X-Handled-By "NGINX Proxy (Health Check)";
            # Desabilitar cache para health checks
            proxy_no_cache 1; # Não usar o cache para esta requisição
            proxy_cache_bypass 1; # Não pegar do cache, ir direto ao backend
        }
    }
}
